// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"golang-library-app/app"
	"golang-library-app/controller"
	impl3 "golang-library-app/controller/impl"
	"golang-library-app/repository"
	"golang-library-app/repository/impl"
	"golang-library-app/usecase"
	impl2 "golang-library-app/usecase/impl"
	"gorm.io/gorm"
)

// Injectors from injector.go:

func InitializedGinEngine(databaseSetup *gorm.DB) *gin.Engine {
	bookRepositoryImpl := impl.NewBookRepositoryImpl()
	bookUsecaseImpl := impl2.NewBookUsecaseImpl(bookRepositoryImpl, databaseSetup)
	bookControllerImpl := impl3.NewBookControllerImpl(bookUsecaseImpl)
	kindRepositoryImpl := impl.NewKindRepositoryImpl()
	kindUsecaseImpl := impl2.NewKindUsecaseImpl(kindRepositoryImpl, bookRepositoryImpl, databaseSetup)
	kindControllerImpl := impl3.NewKindControllerImpl(kindUsecaseImpl)
	publisherRepositoryImpl := impl.NewPublisherRepositoryImpl()
	publisherUsecaseImpl := impl2.NewPublisherUsecaseImpl(publisherRepositoryImpl, databaseSetup)
	publisherControllerImpl := impl3.NewPublisherControllerImpl(publisherUsecaseImpl)
	visitorRepositoryImpl := impl.NewVisitorRepositoryImpl()
	visitorUsecaseImpl := impl2.NewVisitorUsecaseImpl(visitorRepositoryImpl, databaseSetup)
	visitorControllerImpl := impl3.NewVisitorControllerImpl(visitorUsecaseImpl)
	employeeRepositoryImpl := impl.NewEmployeeRepositoryImpl()
	employeeUsecaseImpl := impl2.NewEmployeeUsecaseImpl(employeeRepositoryImpl, databaseSetup)
	employeeControllerImpl := impl3.NewEmployeeControllerImpl(employeeUsecaseImpl)
	memberRepositoryImpl := impl.NewMemberRepositoryImpl()
	memberUsecaseImpl := impl2.NewMemberUsecaseImpl(memberRepositoryImpl, databaseSetup)
	memberControllerImpl := impl3.NewMemberControllerImpl(memberUsecaseImpl)
	userRepositoryImpl := impl.NewUserRepositoryImpl()
	userUsecaseImpl := impl2.NewUserUsecaseImpl(userRepositoryImpl, databaseSetup)
	userControllerImpl := impl3.NewUserControllerImpl(userUsecaseImpl)
	engine := app.NewRouter(bookControllerImpl, kindControllerImpl, publisherControllerImpl, visitorControllerImpl, employeeControllerImpl, memberControllerImpl, userControllerImpl)
	return engine
}

// injector.go:

var bookSet = wire.NewSet(impl.NewBookRepositoryImpl, wire.Bind(new(repository.BookRepository), new(*impl.BookRepositoryImpl)), impl2.NewBookUsecaseImpl, wire.Bind(new(usecase.BookUsecase), new(*impl2.BookUsecaseImpl)), impl3.NewBookControllerImpl, wire.Bind(new(controller.BookController), new(*impl3.BookControllerImpl)))

var publisherSet = wire.NewSet(impl.NewPublisherRepositoryImpl, wire.Bind(new(repository.PublisherRepository), new(*impl.PublisherRepositoryImpl)), impl2.NewPublisherUsecaseImpl, wire.Bind(new(usecase.PublisherUsecase), new(*impl2.PublisherUsecaseImpl)), impl3.NewPublisherControllerImpl, wire.Bind(new(controller.PublisherController), new(*impl3.PublisherControllerImpl)))

var kindSet = wire.NewSet(impl.NewKindRepositoryImpl, wire.Bind(new(repository.KindRepository), new(*impl.KindRepositoryImpl)), impl2.NewKindUsecaseImpl, wire.Bind(new(usecase.KindUsecase), new(*impl2.KindUsecaseImpl)), impl3.NewKindControllerImpl, wire.Bind(new(controller.KindController), new(*impl3.KindControllerImpl)))

var visitorSet = wire.NewSet(impl.NewVisitorRepositoryImpl, wire.Bind(new(repository.VisitorRepository), new(*impl.VisitorRepositoryImpl)), impl2.NewVisitorUsecaseImpl, wire.Bind(new(usecase.VisitorUsecase), new(*impl2.VisitorUsecaseImpl)), impl3.NewVisitorControllerImpl, wire.Bind(new(controller.VisitorController), new(*impl3.VisitorControllerImpl)))

var employeeSet = wire.NewSet(impl.NewEmployeeRepositoryImpl, wire.Bind(new(repository.EmployeeRepository), new(*impl.EmployeeRepositoryImpl)), impl2.NewEmployeeUsecaseImpl, wire.Bind(new(usecase.EmployeeUsecase), new(*impl2.EmployeeUsecaseImpl)), impl3.NewEmployeeControllerImpl, wire.Bind(new(controller.EmployeeController), new(*impl3.EmployeeControllerImpl)))

var memberSet = wire.NewSet(impl.NewMemberRepositoryImpl, wire.Bind(new(repository.MemberRepository), new(*impl.MemberRepositoryImpl)), impl2.NewMemberUsecaseImpl, wire.Bind(new(usecase.MemberUsecase), new(*impl2.MemberUsecaseImpl)), impl3.NewMemberControllerImpl, wire.Bind(new(controller.MemberController), new(*impl3.MemberControllerImpl)))

var userSet = wire.NewSet(impl.NewUserRepositoryImpl, wire.Bind(new(repository.UserRepository), new(*impl.UserRepositoryImpl)), impl2.NewUserUsecaseImpl, wire.Bind(new(usecase.UserUsecase), new(*impl2.UserUsecaseImpl)), impl3.NewUserControllerImpl, wire.Bind(new(controller.UserController), new(*impl3.UserControllerImpl)))

var allSet = wire.NewSet(bookSet, publisherSet, kindSet, visitorSet, employeeSet, memberSet, userSet)
